{
  "hash": "fc173fdb0b603ac2ff51321206c18c67",
  "result": {
    "markdown": "---\ntitle: \"Matrix transformations and Low-rank matrices\"\ndescription: \"Understanding matrix transformations as pre-multiplying a vector with a matrix and interpreting matrix transformations using low-rank matrices.\"\nauthor: \"Vannsh Jani\"\ndate: \"07/31/2023\"\ndraft: false\n---\n\n# Matrix Transformations\n\n| Matrix transformation or linear transformation of a vector v is pre-multiplying the vector by a matrix (called the transformation matrix) which results in v being transformed.\n\n| Let us first interpret matrix transformations in the 2D space.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom sympy import Matrix, MatrixSymbol, Eq, MatMul\n\nsympy_v = MatrixSymbol(\"v\",2,1) # Column vector having 2 rows\nsympy_A = MatrixSymbol(\"A\",2,2) # 2x2 Transformation matrix\nsympy_y = MatrixSymbol(\"y\", 2, 1)\nprint(\"y is the transformed vector.\")\nEq(sympy_y,sympy_A*sympy_v,evaluate=False)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny is the transformed vector.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n$\\displaystyle y = A v$\n:::\n:::\n\n\n### Example\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nA = np.array([[3,3],[2,6]])\nv = np.array([1,1])\nAv = A @ v\nplt.arrow(0,0,1,1,head_width=0.2,width=0.05,color=\"blue\",label=\"v\")\nplt.arrow(0,0,Av[0],Av[1],head_width=0.2,width=0.05,color='red',label=\"Av\")\nplt.legend([f\"v = {v}\",f\"Av = {Av}\"],loc='lower right')\nplt.title(f\"A = {A}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index (3)_files/figure-html/cell-3-output-1.png){width=558 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nEq(Matrix(Av),MatMul(Matrix(A),Matrix(v)),evaluate=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n$\\displaystyle \\left[\\begin{matrix}6\\\\8\\end{matrix}\\right] = \\left[\\begin{matrix}3 & 3\\\\2 & 6\\end{matrix}\\right] \\left[\\begin{matrix}1\\\\1\\end{matrix}\\right]$\n:::\n:::\n\n\nIn the above equation,\n\nA = $\\begin{bmatrix} 3&3\\\\2&6\\end{bmatrix}$, v = $\\begin{bmatrix} 1\\\\1 \\end{bmatrix}$ and y = $\\begin{bmatrix} 6\\\\8 \\end{bmatrix}$\n\n#### \n\n#### [Note:]{.underline}\n\n#### If the transformation matrix A is taken to be $\\begin{bmatrix} \\cos(\\theta)&-\\sin(\\theta)\\\\ \\sin(\\theta)&\\cos(\\theta) \\end{bmatrix}$\n\n#### then the vector v is rotated in an anti-clockwise direction by an angle $\\theta$.\n\nFor example, Let's take v = $\\begin{bmatrix} 1\\\\0 \\end{bmatrix}$ and $\\theta$=90 deg, therefore A = $\\begin{bmatrix} 0&-1\\\\1&0 \\end{bmatrix}$\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nA = np.array([[0,-1],[1,0]])\nv = np.array([1,0])\nAv = A @ v\nplt.figure()\nplt.arrow(0,0,1,0,head_width=0.1,width=0.01,color=\"blue\",label=\"v\")\nplt.arrow(0,0,Av[0],Av[1],head_width=0.1,width=0.01,color='red',label=\"Av\")\nplt.legend([f\"v = {v}\",f\"Av = {Av}\"])\nplt.title(f\"A = {A}\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index (3)_files/figure-html/cell-5-output-1.png){width=577 height=449}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nEq(Matrix(Av),MatMul(Matrix(A),Matrix(v)),evaluate=False)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n$\\displaystyle \\left[\\begin{matrix}0\\\\1\\end{matrix}\\right] = \\left[\\begin{matrix}0 & -1\\\\1 & 0\\end{matrix}\\right] \\left[\\begin{matrix}1\\\\0\\end{matrix}\\right]$\n:::\n:::\n\n\nAs a result of the transformation, vector v is rotated by 90 degrees in the counter-clockwise direction.\n\n# Understanding Matrix transformations of low-rank matrices\n\nLow-rank matrices are matrices which have rank less than the dimensionality of the column space of the matrix. For eg. a 3x3 transformation matrix will be a low rank matrix if it's column space can be spanned by less than or equal to 2 vectors. In other words, the column vectors are linearly dependant.\n\nExample of a low-rank matrix is $\\begin{bmatrix} 1&0&1\\\\0.5&1&1.5\\\\1&0&1 \\end{bmatrix}$\n\nThe determinant of the transformation matrix having low-rank is **zero.**\n\nGeometrically what this means is transforming the vector using a low-rank matrix results in the subspace of the original vector space. Hence for example if the original vector space is $R^3$, the resultant subspace can be $R^2$, $R$, or in an extreme case even a point.\n\n### Example\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nA = np.array([[1,-1],[3,-3]]) # Low-rank 2x2 matrix\n# Example 1\nv = np.array([2,3])\nAv = A @ v\nplt.figure()\nplt.subplot(1,2,1)\nplt.arrow(0,0,2,3,head_width=0.1,width=0.01,color=\"blue\",label=\"v\")\nplt.arrow(0,0,Av[0],Av[1],head_width=0.1,width=0.01,color='red',label=\"Av\")\nplt.title(f\"A = {A}\")\nx = np.linspace(-3,3)\ny = x*3\nplt.plot(x,y,color=\"black\",alpha=0.3)\nplt.legend([f\"v = {v}\",f\"Av = {Av}\",\"y=3x\"])\n\n# Example 2\nv1 = np.array([-1.7,2.2])\nplt.subplot(1,2,2)\nplt.arrow(0,0,-1.7,2.2,head_width=0.1,width=0.01,color=\"blue\",label=\"v\")\nplt.arrow(0,0,Av[0],Av[1],head_width=0.1,width=0.01,color='red',label=\"Av\")\nplt.title(f\"A = {A}\")\nx = np.linspace(-3,3)\ny = x*3\nplt.plot(x,y,color=\"black\",alpha=0.3)\nplt.legend([f\"v = {v}\",f\"Av = {Av}\",\"y=3x\"])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index (3)_files/figure-html/cell-7-output-1.png){width=582 height=449}\n:::\n:::\n\n\nIn the above plots, Av (transformed vector) lies on the line $y=3x$, and does not depend on the coordinates of vector v. As a result, using a low-rank matrix to transform a vector results only in the subspace of the original vector space. Here the subspace is the line $y=3x$ and the original vector space is $R^2$.\n\n",
    "supporting": [
      "index (3)_files"
    ],
    "filters": [],
    "includes": {}
  }
}