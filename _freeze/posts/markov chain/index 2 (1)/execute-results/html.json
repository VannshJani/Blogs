{
  "hash": "6fdcec42f97f211c7d2eebc13f887669",
  "result": {
    "markdown": "---\ntitle: \"Markov Chains\"\ndescription: \"Understanding Markov chains.\"\nauthor: \"Vannsh Jani\"\ndate: \"08/27/2023\"\ndraft: false\n---\n\n# What are Markov models?\n\nMarkov models are mathematical models which are used to model sequential data, where the current observation is dependant on the past observations. Markov chains are the simplest markov models wherein, the current observation is only dependant on the previous observation and not dependant on observations prior to previous observations.\n\nThis can be represented by,\n\n$$\nP(x_t|x_1,x_2,...x_{t-1})=P(x_t|x_{t-1})\n$$\n\nFollowing is how we can represent the dependencies in data\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport schemdraw\nfrom schemdraw import flow\nimport schemdraw.elements as elm\n\nwith schemdraw.Drawing() as dwg:\n    dwg += (start := flow.Circle().label('$x_1$').fill('lightblue'))\n    dwg += (flow.Arrow(l=1.5))\n    dwg += (b := flow.Circle().at((3, 0)).label('$x_2$').fill('lightblue'))\n    dwg += (flow.Arrow(l=1.5))\n    dwg += (c := flow.Circle().at((6, 0)).label('$x_3$').fill('lightblue'))\n    dwg += (flow.Circle(r=0.05).at((7.56,0)).fill(\"black\"))\n    dwg += (flow.Circle(r=0.05).at((7.76,0)).fill(\"black\"))\n    dwg += (flow.Circle(r=0.05).at((7.96,0)).fill(\"black\"))\n    dwg += (flow.Arrow(l=1.5))\n    dwg += (c := flow.Circle().at((9.6, 0)).label('$x_n$').fill('lightblue'))\n\n```\n\n::: {.cell-output .cell-output-display}\n![](index 2 (1)_files/figure-html/cell-2-output-1.svg){}\n:::\n:::\n\n\nWe can can calculate probability of a sequence as follows,\n\n$$\nP(x_1,x_2,..x_n)=P(x_1)P(x_2|x_1)P(x_3|x_2)...P(x_n|x_{n-1})\n$$\n\nWhat this basically says is, The probability of any observation $x_i$, is only dependant on $x_{i-1} \\quad \\forall \\quad i \\in [2,n]$.\n\n$P(x_1)$, is called the prior probability for the state/observation initially. The prior probability is the probability for starting from one of the states. It is denoted by $\\pi_i=P(x_1=i)$, where $i$ denotes the initial state from all possible states. The prior probability is one of the parameters of the Markov chain model.\n\nAnother parameter for the Markov chain model is the transition matrix denoted by $A$. If there are $K$ states, the transition matrix will be a $K$x$K$ matrix, where $A_{ij}=P(x_t=j|x_{t-1}=i)$.\n\nLet's take an example for 3 states.\n\nWe can use the markov chain model to predict which city we will go to next, given the city we are in currently.\n\nLet's assume the 3 cities/states to be Bangalore, Chennai and Mumbai and following is the transition matrix for this example.\n\n|               | Bangalore | Chennai | Mumbai |\n|:-------------:|:---------:|:-------:|:------:|\n| **Bangalore** |    0.3    |   0.4   |  0.3   |\n|  **Chennai**  |    0.2    |   0.1   |  0.7   |\n|  **Mumbai**   |    0.4    |   0.4   |  0.2   |\n\nThe sum of each row of the transition matrix must sum up to 1 as it covers all the possibilities.\n\nFollowing is the markov transition graph, which shows the probabilities of going from one city to another.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nwith schemdraw.Drawing() as dwg:\n    dwg += (m := flow.Circle(r=1.0).at((4, 0)).label('Mumbai').fill('lightblue'))\n    dwg += (b := flow.Circle(r=1.0).at((0, -4)).label('Bangalore').fill('lightblue'))\n    dwg += (c := flow.Circle(r=1.0).at((8, -4)).label('Chennai').fill('lightblue'))\n    dwg += elm.Wire('-', arrow='->').at(m.SW).to(b.NE).color('black').label('0.4')\n    dwg += elm.Wire('-', arrow='->').at(m.SE).to(c.NW).color('black').label('0.4')\n    dwg += elm.ArcLoop(arrow='<-').at(m.NW).to(m.NNE).label('0.2')\n    dwg += elm.Arc2(k=.3, arrow='->').at(b.N).to(m.W).label('0.3')\n    dwg += elm.Wire('-', arrow='->').at(b.E).to(c.W).color('black').label('0.4')\n    dwg += elm.ArcLoop(arrow='->').at(b.S).to(b.SW).label('0.3')\n    dwg += elm.ArcLoop(arrow='<-').at(c.SE).to(c.S).label('0.1')\n    dwg += elm.Arc2(k=-.3, arrow='->').at(c.N).to(m.E).label('0.7')\n    dwg += elm.Arc2(k=.1, arrow='->').at(c.SW).to(b.SE).label('0.2')\n```\n\n::: {.cell-output .cell-output-display}\n![](index 2 (1)_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\n## Markov chain sampling\n\nWe can generate a sequence of observations using the following,\n\n1.  Select initial state$(x_1)$ using $\\pi$.\n2.  Sample the state$(x_t)$ from $A$ and $x_{t-1}$, for $t \\in[2,..,T]$.\n\nLet's take the above example and generate a sequence of 6 time stamps.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\"Bangalore\":[0.3,0.2,0.4],\"Chennai\":[0.4,0.1,0.4],\"Mumbai\":[0.3,0.7,0.2]}\nindex_label = [\"Bangalore\",\"Chennai\",\"Mumbai\"]\nprior = {\"prior probability\":[0.4,0.2,0.4]}\ndf1 = pd.DataFrame(data,index=index_label)\ndf2 = pd.DataFrame(prior,index=index_label)\n\npred = []\nfirst_choice = np.random.choice(index_label,p=df2[\"prior probability\"])\npred.append(first_choice)\nwhile (len(pred)<6):\n    current_city = pred[-1]\n    if current_city==\"Bangalore\":\n      index=0\n    elif current_city==\"Chennai\":\n      index=1\n    else:\n      index=2\n    next_city=np.random.choice(index_label,p=df1.iloc[index])\n    pred.append(next_city)\n\nwith schemdraw.Drawing() as dwg:\n  i=0\n  for j in range(len(pred)):\n    city=pred[j]\n    if j==len(pred)-1:\n      dwg += (flow.Circle(r=1.0).at((i,0)).label(city).fill('lightblue'))\n    else:\n      dwg += (flow.Circle(r=1.0).at((i,0)).label(city).fill('lightblue'))\n      dwg += (flow.Arrow(l=1.0))\n      i+=3\ndf2\n```\n\n::: {.cell-output .cell-output-display}\n![](index 2 (1)_files/figure-html/cell-4-output-1.svg){}\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>prior probability</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Bangalore</th>\n      <td>0.4</td>\n    </tr>\n    <tr>\n      <th>Chennai</th>\n      <td>0.2</td>\n    </tr>\n    <tr>\n      <th>Mumbai</th>\n      <td>0.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nYou can change the values of prior probabilities and probabilities in the transition matrix in the link given below.\n\n<https://vannshmarkovchain.streamlit.app/>\n\n",
    "supporting": [
      "index 2 (1)_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}